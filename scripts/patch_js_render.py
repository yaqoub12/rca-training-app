from pathlib import Path

path = Path('app/static/js/main.js')
text = path.read_text(encoding='utf-8')
old_render = """function renderHazardOptions(filter = \"\") {\n  if (!hazardOptionsEl) return;\n  const term = filter.toLowerCase();\n  hazardOptionsEl.innerHTML = \"\";\n  state.hazards\n    .filter((hazard) =>\n      !term || hazard.name.toLowerCase().includes(term) || hazard.category.toLowerCase().includes(term)\n    )\n    .forEach((hazard) => {\n      const selection = state.hazardSelection.get(hazard.id);\n      const isChecked = Boolean(selection);\n      const parameterValue = selection?.parameter_value ?? \"\";\n      const item = document.createElement(\"label\");\n      item.className = \"list-group-item d-flex flex-column gap-1\";\n      item.innerHTML = `\n        <div class=\"d-flex align-items-start gap-2\">\n          <input class=\"form-check-input flex-shrink-0 js-hazard-checkbox\" type=\"checkbox\" value=\"${hazard.id}\" ${\n            isChecked ? \"checked\" : \"\"\n          }>\n          <div>\n            <div class=\"fw-semibold\">${escapeHTML(hazard.name)}</div>\n            <div class=\"small text-muted\">${escapeHTML(hazard.category)}${hazard.description ? \" � \" + escapeHTML(hazard.description) : \"\"}</div>\n          </div>\n        </div>\n        ${\n          hazard.requires_parameter\n            ? `<div class=\"mt-1 ms-4 w-100\">\n                <label class=\"form-label small mb-1\" for=\"hazard-parameter-${hazard.id}\">${escapeHTML(hazard.parameter_label || \"Parameter\")}${\n                hazard.parameter_unit ? ` (${escapeHTML(hazard.parameter_unit)})` : \"\"\n              }</label>\n                <input type=\"text\" class=\"form-control form-control-sm js-hazard-parameter\" id=\"hazard-parameter-${hazard.id}\" data-hazard-id=\"${hazard.id}\" value=\"${escapeHTML(parameterValue)}\" ${              isChecked ? \"\" : \"disabled\"            } placeholder=\"Enter value\">\n              </div>`\n            : \"\"\n        }\n      `;\n      const checkbox = item.querySelector(\".js-hazard-checkbox\");\n      const paramInput = item.querySelector(\".js-hazard-parameter\");\n      checkbox.addEventListener(\"change\", (event) => {\n        const id = parseInt(event.target.value, 10);\n        if (event.target.checked) {\n          const existing = state.hazardSelection.get(id) || { id, parameter_value: paramInput?.value ?? \"\" };\n          state.hazardSelection.set(id, existing);\n          if (paramInput) {\n            paramInput.removeAttribute(\"disabled\");\n            paramInput.focus();\n          }\n        } else {\n          state.hazardSelection.delete(id);\n          if (paramInput) {\n            paramInput.value = \"\";\n            paramInput.setAttribute(\"disabled\", \"disabled\");\n          }\n        }\n      });\n      if (paramInput) {\n        paramInput.addEventListener(\"input\", (event) => {\n          const id = parseInt(event.target.dataset.hazardId, 10);\n          if (!state.hazardSelection.has(id)) {\n            state.hazardSelection.set(id, { id, parameter_value: event.target.value });\n            item.querySelector(\".js-hazard-checkbox\").checked = true;\n          } else {\n            const entry = state.hazardSelection.get(id);\n            entry.parameter_value = event.target.value;\n            state.hazardSelection.set(id, entry);\n          }\n        });\n      }\n      hazardOptionsEl.appendChild(item);\n    });\n}\n"""
new_render = """function renderHazardOptions(filter = \"\") {\n  if (!hazardOptionsEl) return;\n  const term = filter.toLowerCase();\n  hazardOptionsEl.innerHTML = \"\";\n  state.hazards\n    .filter((hazard) =>\n      !term || hazard.name.toLowerCase().includes(term) || hazard.category.toLowerCase().includes(term)\n    )\n    .forEach((hazard) => {\n      const selection = state.hazardSelection.get(hazard.id);\n      const isChecked = Boolean(selection);\n      const parameterValue = selection?.parameter_value ?? \"\";\n      const item = document.createElement(\"label\");\n      item.className = \"list-group-item d-flex flex-column gap-1\";\n      const description = hazard.description ? ` - ${escapeHTML(hazard.description)}` : \"\";\n      const parameterMarkup = hazard.requires_parameter\n        ? `<div class=\"mt-1 ms-4 w-100\">\n            <label class=\"form-label small mb-1\" for=\"hazard-parameter-${hazard.id}\">${escapeHTML(hazard.parameter_label || \"Parameter\")}${hazard.parameter_unit ? ` (${escapeHTML(hazard.parameter_unit)})` : \"\"}</label>\n            <input type=\"text\" class=\"form-control form-control-sm js-hazard-parameter\" id=\"hazard-parameter-${hazard.id}\" data-hazard-id=\"${hazard.id}\" value=\"${escapeHTML(parameterValue)}\" ${isChecked ? \"\" : \"disabled\"} placeholder=\"Enter value\">\n          </div>`\n        : \"\";\n      item.innerHTML = `\n        <div class=\"d-flex align-items-start gap-2\">\n          <input class=\"form-check-input flex-shrink-0 js-hazard-checkbox\" type=\"checkbox\" value=\"${hazard.id}\" ${isChecked ? \"checked\" : \"\"}>\n          <div>\n            <div class=\"fw-semibold\">${escapeHTML(hazard.name)}</div>\n            <div class=\"small text-muted\">${escapeHTML(hazard.category)}${description}</div>\n          </div>\n        </div>\n        ${parameterMarkup}\n      `;\n      const checkbox = item.querySelector(\".js-hazard-checkbox\");\n      const paramInput = item.querySelector(\".js-hazard-parameter\");\n      checkbox.addEventListener(\"change\", (event) => {\n        const id = parseInt(event.target.value, 10);\n        if (event.target.checked) {\n          const entry = state.hazardSelection.get(id) || { id, parameter_value: paramInput?.value ?? \"\" };\n          state.hazardSelection.set(id, entry);\n          if (paramInput) {\n            paramInput.removeAttribute(\"disabled\");\n            paramInput.focus();\n          }\n        } else {\n          state.hazardSelection.delete(id);\n          if (paramInput) {\n            paramInput.value = \"\";\n            paramInput.setAttribute(\"disabled\", \"disabled\");\n          }\n        }\n      });\n      if (paramInput) {\n        paramInput.addEventListener(\"input\", (event) => {\n          const id = parseInt(event.target.dataset.hazardId, 10);\n          const value = event.target.value;\n          const entry = state.hazardSelection.get(id) || { id, parameter_value: value };\n          entry.parameter_value = value;\n          state.hazardSelection.set(id, entry);\n          const checkboxEl = item.querySelector(\".js-hazard-checkbox\");\n          if (!checkboxEl.checked) {\n            checkboxEl.checked = true;\n          }\n        });\n      }\n      hazardOptionsEl.appendChild(item);\n    });\n}\n"""
if old_render not in text:
    raise SystemExit('renderHazardOptions block not found for replacement')
text = text.replace(old_render, new_render)
old_badges = """function renderHazardBadges(hazards = []) {\n  if (!hazards.length) {\n    return '<span class=\\"text-muted small\\">No hazards selected</span>';\n  }\n  return hazards\n    .map((hazard) => `<span class=\\"badge bg-warning-subtle text-dark border\\">${escapeHTML(hazard.name)}</span>`)\n    .join(\"\");\n}\n"""
new_badges = """function renderHazardBadges(hazards = []) {\n  if (!hazards.length) {\n    return '<span class=\\"text-muted small\\">No hazards selected</span>';\n  }\n  return hazards\n    .map((hazard) => {\n      let label = escapeHTML(hazard.name);\n      if (hazard.parameter_value) {\n        const parameterLabel = escapeHTML(hazard.parameter_label || \"Value\");\n        const parameterUnit = hazard.parameter_unit ? ` ${escapeHTML(hazard.parameter_unit)}` : \"\";\n        label += ` (${parameterLabel}: ${escapeHTML(hazard.parameter_value)}${parameterUnit})`;\n      }\n      return `<span class=\\"badge bg-warning-subtle text-dark border\\">${label}</span>`;\n    })\n    .join(\"\");\n}\n"""
if old_badges not in text:
    raise SystemExit('renderHazardBadges block not found for replacement')
text = text.replace(old_badges, new_badges)
path.write_text(text, encoding='utf-8')
